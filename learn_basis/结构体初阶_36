#define _CRT_SECURE_NO_WARNINGS 1//scanf
#include <stdio.h>//printf
//结构体 - 结构是一些值的集合, 这些值称为成员变量. 结构的每个成员可以是不同类型的变量 - 值的类型可以不同
struct S
{
	int a;
	char b[15];
};
struct Stu// - 结构的成员可以是标量,数组,指针,甚至是其他结构体
{
	struct S sss;//结构体里的结构体成员
	char name[10];
	int age;
	char id[11];
}s1,s2;//这里s1,s2相当于创建的结构体变量,但是这两个是全局变量

void print1(struct Stu t)//接收结构体类型
{
	printf("%d %s %s %d %s\n\n", t.sss.a, t.sss.b, t.name, t.age, t.id);
}

void print2(struct Stu* pa)
{
	printf("%d %s ", pa->sss.a, pa->sss.b);
}

//int main()
//{
//	struct Stu s = { {123,"struct S-char"}, "小明",18,"114514"};//这里的s是局部变量		大括号里大括号 - 初始化结构体里的结构体成员
//	//访问		. ->
//	printf("%s\n", s.sss.b);//结构体s中的结构体成员sss中的字符类型b
//
//	struct Stu* pa = &s;
//	printf("%d\n", pa->sss.a);
//	
//	//结构体传参
//	//创建一个函数打印结构体内容
//	// 栈 - 是一种数据结构 - 先进的后出, 后进的先出
//	// 压栈 - 把数据放到栈里的过程 - 参数传参的动作也叫压栈操作
//	// 出栈 - 删除栈中元素的过程
//	//传参 - 传值, 函数传参的时候, 参数是需要压栈的. 如果传递一个结构体对象的时候, 结构体过大, 参数压栈的系统开销就比较大,所以会导致性能的下降
//	print1(s);//传值调用 - 传过去值,需要开辟等大的空间然后传进去,需要的时间和空间都比传址需要的大
//	print2(&s);//传址调用 - 传过去地址,接收的指针变量8字节(32位为4字节)							-				传参的时候传址效率更高
//
//
//	return 0;
//}
